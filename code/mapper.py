#!/usr/bin/env python2.7

import numpy as np
import random
import sys

lam = 0.1
nt = 10
#nlen = 80600
nlen = 400
#nlen = 800
w = np.zeros(nlen)
mean = np.array([ 0.0021247 , 0.00327138 , 0.00335228 , 0.00174325 , 0.00347437 , 0.00363789 , 0.001921 , 0.00218416 , 0.00187627 , 0.00345901 , 0.00526041 , 0.00450879 , 0.00352724 , 0.00304048 , 0.00224479 , 0.00178515 , 0.00216436 , 0.00379763 , 0.00257537 , 0.00292309 , 0.00608282 , 0.0023576 , 0.00438643 , 0.00715897 , 0.00369868 , 0.00057557 , 0.00301842 , 0.00627976 , 0.00183886 , 0.00182227 , 0.0032806 , 0.00351325 , 0.00246596 , 0.00263194 , 0.00357221 , 0.0030648 , 0.00213657 , 0.00123566 , 0.00212619 , 0.00301346 , 0.00161008 , 0.012523 , 0.00251922 , 0.00525717 , 0.00266069 , 0.00282968 , 0.0039324 , 0.00206912 , 0.00308265 , 0.00202322 , 0.00406799 , 0.00183716 , 0.0031808 , 0.00348897 , 0.0041242 , 0.00346631 , 0.00070526 , 0.00129621 , 0.00237485 , 0.00394684 , 0.00244284 , 0.01221536 , 0.0012535 , 0.00267646 , 0.00432438 , 0.00065201 , 0.00222657 , 0.00081019 , 0.00277578 , 0.00119379 , 0.00331245 , 0.00337798 , 0.00265836 , 0.00096655 , 0.00217731 , 0.00262466 , 0.00157054 , 0.00302524 , 0.0040941 , 0.0027595 , 0.00079096 , 0.00260365 , 0.00271908 , 0.00279204 , 0.00186998 , 0.00240143 , 0.00319483 , 0.00289285 , 0.00125473 , 0.0022097 , 0.00217097 , 0.00227258 , 0.00367343 , 0.00280881 , 0.00058129 , 0.00308603 , 0.00280053 , 0.00131449 , 0.0007568 , 0.00359467 , 0.00328073 , 0.00232805 , 0.00318162 , 0.00385912 , 0.00270192 , 0.00097254 , 0.00230804 , 0.00136135 , 0.00459516 , 0.00384853 , 0.00043219 , 0.00152815 , 0.0024822 , 0.00180617 , 0.00284325 , 0.0005554 , 0.00417378 , 0.00231341 , 0.00359238 , 0.00194416 , 0.00221749 , 0.00212002 , 0.00140867 , 0.00605887 , 0.00209992 , 0.00231154 , 0.00120817 , 0.00296621 , 0.00230647 , 0.00086526 , 0.00354533 , 0.00227216 , 0.00367702 , 0.00271932 , 0.00196986 , 0.00207266 , 0.00147002 , 0.00017158 , 0.00224635 , 0.00351943 , 0.00306867 , 0.00237487 , 0.0004271 , 0.00300356 , 0.00372704 , 0.00242829 , 0.00086049 , 0.00111865 , 0.00279123 , 0.00137466 , 0.0043073 , 0.00320345 , 0.00257604 , 0.00234219 , 0.0021316 , 0.00290994 , 0.00169988 , 0.00282294 , 0.00305356 , 0.00318083 , 0.00414898 , 0.00056886 , 0.00302883 , 0.00028598 , 0.00259075 , 0.00198404 , 0.00267096 , 0.00018366 , 0.00231027 , 0.00192145 , 0.00358727 , 0.00303977 , 0.00058895 , 0.00113027 , 0.00361354 , 0.0009693 , 0.00187063 , 0.00284713 , 0.00402634 , 0.00041505 , 0.00088363 , 0.00279674 , 0.00215798 , 0.00321006 , 0.0012822 , 0.00116975 , 0.0024515 , 0.00240985 , 0.00358796 , 0.00316969 , 0.00534167 , 0.00319583 , 0.00301708 , 0.00025152 , 0.00228868 , 0.00229564 , 0.00412544 , 0.00236942 , 0.00479167 , 0.00051616 , 0.0009365 , 0.0003674 , 0.00078959 , 0.00074102 , 0.00282336 , 0.00357657 , 0.00572712 , 0.0031925 , 0.00141685 , 0.00402826 , 0.00274083 , 0.00228171 , 0.001311 , 0.00310497 , 0.00147948 , 0.00190601 , 0.00238605 , 0.00258734 , 0.00187972 , 0.00225618 , 0.00419919 , 0.00236988 , 0.0022703 , 0.00295352 , 0.00079703 , 0.00017141 , 0.00071073 , 0.00220275 , 0.0023522 , 0.00034262 , 0.00301242 , 0.00405637 , 0.00180142 , 0.00453895 , 0.00256319 , 0.00217099 , 0.00310147 , 0.00137248 , 0.0011207 , 0.00354937 , 0.0025191 , 0.00428036 , 0.00090588 , 0.00152613 , 0.00043206 , 0.00205716 , 0.00296761 , 0.00059245 , 0.00060304 , 0.00553093 , 0.00060631 , 0.00240014 , 0.00515701 , 0.00321639 , 0.00168435 , 0.00243795 , 0.00330962 , 0.00180879 , 0.00036057 , 0.00229996 , 0.00423005 , 0.0033374 , 0.00410611 , 0.00090301 , 0.00277714 , 0.00209668 , 0.0022365 , 0.00216303 , 0.00336287 , 0.00256315 , 0.00419193 , 0.00238115 , 0.00130047 , 0.00385489 , 0.00215719 , 0.00325449 , 0.0024968 , 0.00391287 , 0.00320335 , 0.00353497 , 0.00227743 , 0.00208278 , 0.00128016 , 0.0029567 , 0.00302784 , 0.00314586 , 0.00073484 , 0.00230536 , 0.00326292 , 0.00283173 , 0.00338477 , 0.00215072 , 0.00136351 , 0.00254177 , 0.00046799 , 0.00141969 , 0.0017755 , 0.00041824 , 0.00072539 , 0.00303937 , 0.00139362 , 0.00246501 , 0.00024483 , 0.00432749 , 0.00452903 , 0.00472957 , 0.00101684 , 0.0027755 , 0.00289345 , 0.00249476 , 0.0017948 , 0.00280837 , 0.00080563 , 0.00141841 , 0.00185582 , 0.00185342 , 0.00274033 , 0.0031581 , 0.00192507 , 0.00175535 , 0.00291274 , 0.00051881 , 0.00415094 , 0.00132693 , 0.00251591 , 0.00320347 , 0.00158675 , 0.00331474 , 0.00323431 , 0.00160848 , 0.00041333 , 0.00159821 , 0.00140289 ,
       0.00221582 , 0.00294874 , 0.00286155 , 0.00125406 , 0.00282615 , 0.00017823 , 0.00145312 , 0.00259066 , 0.00363183 , 0.00282599 , 0.0032133 , 0.00093148 , 0.00229866 , 0.00312017 , 0.00887576 , 0.00197399 , 0.00159647 , 0.00306202 , 0.00175491 , 0.00254037 , 0.00139986 , 0.00050659 , 0.00242193 , 0.0016578 , 0.00142559 , 0.00259478 , 0.00154557 , 0.00194243 , 0.00436383 , 0.00247915 , 0.00247155 , 0.00325942 , 0.00081733 , 0.00047799 , 0.00262656 , 0.00299577 , 0.00334667 ,
       0.00304349 , 0.00321866 , 0.00255807 , 0.00743812 , 0.00261771 , 0.00103745 , 0.00184841 , 0.00321058 , 0.00255889 , 0.00110271 , 0.00165028 , 0.00226212 , 0.00063843 , 0.00267725 , 0.00115296 , 0.0020758 , 0.00063164 , 0.00129843 , 0.00306686 , 0.00132099 , 0.00173505 , 0.0028 , 0.00459682 , 0.00153965 , 0.00268424 , 0.00209692 , 0.00322496 , 0.00029111 , 0.00115519 , 0.00318123])

std = np.array([0.0019686 , 0.0036018 , 0.00354881 , 0.00225481 , 0.00433293 , 0.00793178 , 0.00356344 , 0.00179425 , 0.00255394 , 0.00338727 , 0.00521349 , 0.00384217 , 0.00580709 , 0.00261183 , 0.00266511 , 0.00255918 , 0.0019503 , 0.00374551 , 0.00306225 , 0.0025482 , 0.03540269 , 0.00223408 , 0.00357679 , 0.00851564 , 0.00309014 , 0.00197219 , 0.00646023 , 0.01065243 , 0.0016036 , 0.00180328 , 0.00342727 , 0.00745923 , 0.00190517 , 0.00208062 , 0.00400319 , 0.00295376 , 0.00205938 , 0.00209122 , 0.00243051 , 0.00499441 , 0.00519482 , 0.0139131 , 0.00227517 , 0.0059341 , 0.00237798 , 0.00223464 , 0.00488143 , 0.00187644 , 0.00223317 , 0.00166308 , 0.00337996 , 0.00215362 , 0.00286107 , 0.00407949 , 0.00427418 , 0.00393359 , 0.00098801 , 0.00202725 , 0.00224632 , 0.00285923 , 0.00250035 , 0.01453556 , 0.00156337 , 0.00319269 , 0.00400001 , 0.00115588 , 0.00198288 , 0.00193455 , 0.00214149 , 0.00147864 , 0.00380341 , 0.00350257 , 0.00429699 , 0.0012903 , 0.00192188 , 0.00256172 , 0.002852 , 0.00308298 , 0.00377441 , 0.00245237 , 0.00135116 , 0.00330208 , 0.00234693 , 0.00228347 , 0.0016215 , 0.00222762 , 0.00362925 , 0.00225975 , 0.00149001 , 0.00188476 , 0.00201116 , 0.00185454 , 0.00350476 , 0.00350612 , 0.00116192 , 0.00399784 , 0.00226162 , 0.00191168 , 0.00210533 , 0.00366935 , 0.00287415 , 0.00231275 , 0.00277484 , 0.00510177 , 0.0021485 , 0.00186223 , 0.00204287 , 0.00231701 , 0.00645682 , 0.00426328 , 0.0012054 , 0.0029941 , 0.00196568 , 0.00172113 , 0.00265512 , 0.00177714 , 0.00306691 , 0.00301257 , 0.00404046 , 0.00272488 , 0.00253263 , 0.00212857 , 0.00208277 , 0.0100413 , 0.00195124 , 0.00180173 , 0.00165263 , 0.00371467 , 0.00207706 , 0.0011584 , 0.00352561 , 0.00212309 , 0.00718654 , 0.00212238 , 0.00197445 , 0.00188264 , 0.00156608 , 0.00096511 , 0.00236596 , 0.00376707 , 0.00263745 , 0.00283046 , 0.00111602 , 0.00235769 , 0.00328629 , 0.00230128 , 0.00125243 , 0.00201319 , 0.00341738 , 0.00179424 , 0.0061 , 0.00365274 , 0.00280398 , 0.00228456 , 0.00197616 , 0.00225124 , 0.00282051 , 0.00260312 , 0.00293045 , 0.00458176 , 0.00452631 , 0.00209155 , 0.00266546 , 0.00087845 , 0.00318464 , 0.00205475 , 0.00213799 , 0.00109409 , 0.00275867 , 0.00215033 , 0.00707078 , 0.00240742 , 0.00122575 , 0.00246242 , 0.00392322 , 0.00147603 , 0.00205012 , 0.00225438 , 0.0044538 , 0.0013759 , 0.0017494 , 0.00255501 , 0.00320402 , 0.00634842 , 0.00194296 , 0.00200918 , 0.00283631 , 0.00218303 , 0.00294922 , 0.00282276 , 0.00542691 , 0.00362095 , 0.00256959 , 0.00122237 , 0.00198817 , 0.00196145 , 0.00597968 , 0.00247096 , 0.00599095 , 0.00189911 , 0.00144529 , 0.00103706 , 0.00242896 , 0.00139688 , 0.00225196 , 0.0038191 , 0.00694472 , 0.00313075 , 0.00141108 , 0.00497636 , 0.00254569 , 0.0019477 , 0.00226017 , 0.003345 , 0.00158747 , 0.00279952 , 0.00282573 , 0.00207594 , 0.00224206 , 0.00273556 , 0.00303988 , 0.00218727 , 0.00237765 , 0.0023223 , 0.00112641 , 0.00101844 , 0.00203556 , 0.00199955 , 0.00208615 , 0.00121077 , 0.00231013 , 0.00560507 , 0.00172481 , 0.00560192 , 0.00207991 , 0.00204867 , 0.0023036 , 0.00137419 , 0.00204787 , 0.00263048 , 0.00267894 , 0.00498332 , 0.00241627 , 0.00190377 , 0.00109043 , 0.00197392 , 0.00358942 , 0.00116643 , 0.00131939 , 0.01298375 , 0.00118746 , 0.0026771 , 0.00520656 , 0.00233646 , 0.00249066 , 0.00238451 , 0.00657579 , 0.00300719 , 0.00102931 , 0.00201209 , 0.00543582 , 0.00306765 , 0.00458365 , 0.00122229 , 0.00458545 , 0.00170668 , 0.00202807 , 0.00202397 , 0.00321476 , 0.00341161 , 0.00456799 , 0.00218324 , 0.0015583 , 0.0049696 , 0.00242783 , 0.00265631 , 0.00294101 , 0.00496735 , 0.00255864 , 0.00378041 , 0.00200908 , 0.00274173 , 0.00132888 , 0.00485311 , 0.00245103 , 0.00544782 , 0.00213748 , 0.00206368 , 0.00350469 , 0.00238708 , 0.00349198 , 0.00279123 , 0.00204929 , 0.00205694 , 0.00118469 , 0.00149177 , 0.00159639 , 0.00122576 , 0.00109027 , 0.00299057 , 0.00134246 , 0.00296318 , 0.00121302 , 0.00551288 , 0.00542859 , 0.00402378 , 0.00148259 , 0.00302477 , 0.0036248 , 0.00236309 , 0.00180729 , 0.00279822 , 0.0012104 , 0.00135713 , 0.0017786 , 0.00207074 , 0.00261185 , 0.00269347 , 0.00213923 , 0.00200084 , 0.00373426 , 0.00123309 , 0.00616038 , 0.00216598 , 0.00208907 , 0.00410957 , 0.00230429 , 0.00293215 , 0.00319119 , 0.00210316 , 0.00167393 , 0.00157808 , 0.00245699 , 0.00189912 , 0.00235511 , 0.00405045 , 0.00190984 , 0.00274698 ,
    0.00102519 , 0.00252664 , 0.00203642 , 0.00388651 , 0.00281513 , 0.00257494 , 0.00151852 , 0.00263322 , 0.00249434 , 0.02322235 , 0.00166398 , 0.00227141 , 0.00307127 , 0.00182583 , 0.0022627 , 0.00212355 , 0.00161979 , 0.00227363 , 0.00145197 , 0.002614 , 0.00249036 , 0.00460873 , 0.00200609 , 0.00552475 , 0.00374325 , 0.00415206 , 0.00424183 , 0.00119814 , 0.0010494 , 0.003258 , 0.00269982 , 0.00293041 , 0.00361731 , 0.00333077 , 0.00206051 , 0.00607225 , 0.00329532 , 0.00123774 , 0.00166517 , 0.00269227 , 0.00226184 , 0.00163776 , 0.00169993 , 0.00188491 , 0.00115674 , 0.00228644 , 0.0015176 , 0.00203736 , 0.00136119 , 0.00252618 , 0.00263322 , 0.00160604 , 0.00209135 , 0.00246652 , 0.00692123 , 0.00167373 , 0.00218226 , 0.00180296 , 0.00309296 , 0.00090853 , 0.00160975 , 0.00246021 ])





# This function has to either stay in this form or implement the
# feature mapping. For details refer to the handout pdf.
def transform(x_original):
    #y_original = x_original
    y_original = np.divide(np.subtract(x_original,mean),std)
    """
    z_original = np.square(x_original)
    t_original = np.concatenate((y_original ,z_original),axis=0)
    z_original = np.sqrt(x_original)
    t_original = np.concatenate((t_original ,z_original),axis=0)
    y_original = t_original
    """
    #y_original = np.concatenate((t_original ,[1]),axis=0)
    """
    z1_original = np.tile(x_original, 400)
    z2_original = np.repeat(x_original, 400)
    z3_original = np.absolute(np.subtract(z1_original, z2_original))
    y_original = np.concatenate((y_original, z3_original), axis=0)
    """
    """
    y_original = x_original
    for x in range(0,400,1);
        z_original = np.multiple(x_original)
        y_original = np.concatenate((x_original, y_original), axis=0)
    """
    """
    y_original = x_original
    for x in range(0,400,1):
        for y in range(x,400,1):
            y_original = np.append(y_original,[x_original[x]*x_original[y]])
    """
    return y_original

if __name__ == "__main__":
    np.random.seed(seed=42)

    for line in sys.stdin:
        line = line.strip()
        count = 0
        feature = []
        label = int(line[:2])
        fea = np.fromstring(line[3:],sep=" ")
        feature = transform(fea)
        sign = 0
        for i in range(0,nlen,1):
            sign += float(feature[i])*w[i]
        loss = label * sign
        #update w
        if loss < 1:
            s = 0
            wp = w
            for i in range(0,nlen,1):
                wp[i] = w[i] + nt * label * float(feature[i])
                s = s + wp[i] * wp[i]
            if np.sqrt(lam*s) > 1:
                for i in range(0,nlen,1):
                    w[i] = wp[i]
            else:
                for i in range(0,nlen,1):
                    w[i] = wp[i] * 1/np.sqrt(lam*s)
    for i in range(0, nlen,1):
        print "%d\t%f" % (i, w[i])
